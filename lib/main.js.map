{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n#===========================================================================================================\nclass Subsidiary\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @subsidiaries = new WeakSet()\n    @hosts        = new WeakMap()\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_subsidiaries: ( host ) ->\n    ### TAINT this loop should be changed so we catch all relevant objects, including from inherited classes ###\n    yield { subsidiary_key, subsidiary, } \\\n      for subsidiary_key, subsidiary of host \\\n        when @is_subsidiary subsidiary\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( subsidiary ) ->\n    if @subsidiaries.has subsidiary\n      throw new Error \"object already in use as subsidiary\"\n    @subsidiaries.add subsidiary\n    return subsidiary\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT safeguard against non-object values ###\n  is_subsidiary: ( x ) -> @subsidiaries.has x\n\n  #---------------------------------------------------------------------------------------------------------\n  tie_all: ( cfg ) ->\n    ### TAINT use types, validate ###\n    template  = { host: null, host_key: '_', enumerable: false, }\n    cfg       = { template..., cfg..., }\n    #.......................................................................................................\n    { host\n      host_key\n      enumerable      } = cfg\n    #.......................................................................................................\n    for { subsidiary_key, subsidiary, } from @walk_subsidiaries host\n      @tie_one { host, subsidiary, host_key, subsidiary_key, enumerable, }\n    #.......................................................................................................\n    return host\n\n  #---------------------------------------------------------------------------------------------------------\n  tie_one: ( cfg ) ->\n    ### TAINT use types, validate ###\n    template  = { host: null, subsidiary: null, subsidiary_key: '$', host_key: '_', enumerable: false, }\n    cfg       = { template..., cfg..., }\n    #.......................................................................................................\n    { host\n      subsidiary\n      host_key\n      subsidiary_key\n      enumerable      } = cfg\n    #.......................................................................................................\n    @subsidiaries.add subsidiary\n    if @hosts.has subsidiary\n      throw new Error \"subsidiary already has a host\"\n    ### host->subsidiary is a standard containment/compository relationship and is expressed directly;\n    subsidiary-> host is a backlink that would create a circular reference which we avoid by using a\n    `WeakMap` instance, `@hosts`: ###\n    Object.defineProperty host, subsidiary_key, { value: subsidiary, enumerable, }\n    Object.defineProperty subsidiary, host_key, { get: ( => @get_host subsidiary ), enumerable, }\n    @hosts.set subsidiary, host\n    return host\n\n  #---------------------------------------------------------------------------------------------------------\n  get_host: ( subsidiary ) ->\n    return R if ( R = @hosts.get subsidiary )?\n    throw new Error \"no host registered for object\"\n\n\n#===========================================================================================================\nmodule.exports = { SUBSIDIARY: ( new Subsidiary ), Subsidiary, }\n\n"
  ]
}