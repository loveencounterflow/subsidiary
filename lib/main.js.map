{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n# #===========================================================================================================\n# GUY                       = require 'guy'\n# { alert\n#   debug\n#   help\n#   info\n#   plain\n#   praise\n#   urge\n#   warn\n#   whisper }               = GUY.trm.get_loggers 'intertalk'\n# { rpr\n#   inspect\n#   echo\n#   log     }               = GUY.trm\n# WG                        = require '../../../apps/webguy'\n# hub_s                     = Symbol.for 'hub'\n\n\n\n#===========================================================================================================\nclass Subsidiary\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    @subsidiaries = new WeakSet()\n    @hosts        = new WeakMap()\n\n  #---------------------------------------------------------------------------------------------------------\n  walk_subsidiaries: ( host ) ->\n    ### TAINT this loop should be changed so we catch all relevant objects, including from inherited classes ###\n    yield { subsidiary_key, subsidiary, } \\\n      for subsidiary_key, subsidiary of host \\\n        when @is_subsidiary subsidiary\n\n  #---------------------------------------------------------------------------------------------------------\n  create: ( subsidiary ) ->\n    if @subsidiaries.has subsidiary\n      throw new Error \"object already in use as subsidiary\"\n    @subsidiaries.add subsidiary\n    return subsidiary\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT safeguard against non-object values ###\n  is_subsidiary: ( x ) -> @subsidiaries.has x\n\n  #---------------------------------------------------------------------------------------------------------\n  tie_host_and_subsidiary: ( cfg ) ->\n    ### TAINT use types, validate ###\n    template  = { host: null, subsidiary: null, subsidiary_key: '$', host_key: '_', enumerable: false, }\n    cfg       = { template..., cfg..., }\n    #.......................................................................................................\n    { host\n      subsidiary\n      host_key\n      subsidiary_key\n      enumerable      } = cfg\n    #.......................................................................................................\n    ### TAINT shouldn't be necessary if done explicitly? ###\n    unless @subsidiaries.has subsidiary\n      throw new Error \"object isn't a subsidiary\"\n    if @hosts.has subsidiary\n      throw new Error \"subsidiary already has a host\"\n    ### host->subsidiary is a standard containment/compository relationship and is expressed directly;\n    subsidiary-> host is a backlink that would create a circular reference which we avoid by using a\n    `WeakMap` instance, `@hosts`: ###\n    Object.defineProperty host, subsidiary_key, { value: subsidiary, enumerable, }\n    Object.defineProperty subsidiary, host_key, { get: ( => @get_host subsidiary ), enumerable, }\n    @hosts.set subsidiary, host\n    return subsidiary\n\n  #---------------------------------------------------------------------------------------------------------\n  get_host: ( subsidiary ) ->\n    return R if ( R = @hosts.get subsidiary )?\n    throw new Error \"no host registered for object\"\n\n#===========================================================================================================\nSUBSIDIARY = new Subsidiary\n\n#===========================================================================================================\nclass Host\n\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ->\n    for { subsidiary_key, subsidiary, } from SUBSIDIARY.walk_subsidiaries @\n      SUBSIDIARY.tie_host_and_subsidiary { host: @, subsidiary, host_key: '_', subsidiary_key, }\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  show: ->\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $a: SUBSIDIARY.create\n    show: ->\n      @_.show()\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $b: SUBSIDIARY.create new class B\n    show: ->\n      @_.show()\n      return null\n\n  #---------------------------------------------------------------------------------------------------------\n  $not_a_subsidiary: {}\n\n#===========================================================================================================\nmodule.exports = { SUBSIDIARY, Subsidiary, }\n\n"
  ]
}